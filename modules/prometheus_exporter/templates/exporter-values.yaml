replicaCount: ${replica}

rbac:
  # Specifies whether RBAC resources should be created
  create: ${rbac_enabled}
  pspEnabled: ${psp_enabled}
  pspUseAppArmor: true
serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: ${rbac_enabled}
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

image:
  repository: ${image}
  tag: ${tag}
  pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

consulServer: ${consul_server_and_port}

# Flags - for a list visit https://github.com/prometheus/consul_exporter#flags
options: ${options}
  # no-consul.health-summary:
  # kv.filter=foobar

service:
  type: ClusterIP
  port: 9107
  annotations: ${service_annotations}

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: ${resources}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

serviceMonitor:
  # When set true then use a ServiceMonitor to configure scraping
  enabled: ${service_monitor_enabled}
  # Set the namespace the ServiceMonitor should be deployed
  # namespace: monitoring
  # Set how frequently Prometheus should scrape
  # interval: 30s
  # Set path to consul-exporter telemtery-path
  # telemetryPath: /metrics
  # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator
  # labels:
  # Set timeout for scrape
  # timeout: 10s
  # Set of labels to transfer on the Kubernetes Service onto the target.
  # targetLabels: []
  # metricRelabelings: []

nodeSelector: null

tolerations: ${tolerations}

affinity: ${affinity}

# Extra environment variables
extraEnv: ${env}

podAnnotations: ${pod_annotations}

initContainers: ${init_containers}

# Extra containers for the exporter pod
extraContainers: ${extra_containers}

# Extra Volumes for the pod
extraVolumes: ${extra_volumes}
# - name: example
#   configMap:
#     name: example

# Extra Volume Mounts for the exporter container
extraVolumeMounts: ${extra_volume_mounts}
# - name: example
#   mountPath: /example
